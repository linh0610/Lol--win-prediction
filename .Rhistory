install.packages("shiny")
library(shiny)
library(glmnet) # Make sure you have glmnet for the model
install.packages("glmnet")
library(shiny)
library(glmnet) # Make sure you have glmnet for the model
# Load the trained model
model <- readRDS("path/to/lol_LASSO_min_AUC.rds")  # Update with the correct path
library(shiny)
library(glmnet) # Make sure you have glmnet for the model
# Load the trained model
model <- readRDS("lol_LASSO_min_AUC.rds")  # Update with the correct path
# Define UI for the application
ui <- fluidPage(
titlePanel("League of Legends Win Prediction"),
sidebarLayout(
sidebarPanel(
numericInput("firstBlood", "First Blood:", 0, min = 0, max = 2),
numericInput("firstTower", "First Tower:", 0, min = 0, max = 2),
numericInput("firstInhibitor", "First Inhibitor:", 0, min = 0, max = 2),
numericInput("firstBaron", "First Baron:", 0, min = 0, max = 2),
numericInput("firstDragon", "First Dragon:", 0, min = 0, max = 2),
numericInput("firstRiftHerald", "First Rift Herald:", 0, min = 0, max = 2),
numericInput("t1_towerKills", "Team 1 Tower Kills:", 0, min = 0),
numericInput("t1_inhibitorKills", "Team 1 Inhibitor Kills:", 0, min = 0),
numericInput("t1_baronKills", "Team 1 Baron Kills:", 0, min = 0),
numericInput("t1_dragonKills", "Team 1 Dragon Kills:", 0, min = 0),
numericInput("t1_riftHeraldKills", "Team 1 Rift Herald Kills:", 0, min = 0),
numericInput("t2_towerKills", "Team 2 Tower Kills:", 0, min = 0),
numericInput("t2_inhibitorKills", "Team 2 Inhibitor Kills:", 0, min = 0),
numericInput("t2_baronKills", "Team 2 Baron Kills:", 0, min = 0),
numericInput("t2_dragonKills", "Team 2 Dragon Kills:", 0, min = 0),
numericInput("t2_riftHeraldKills", "Team 2 Rift Herald Kills:", 0, min = 0),
actionButton("predict", "Predict")
),
mainPanel(
h4("Prediction Result:"),
verbatimTextOutput("prediction")
)
)
)
# Define server logic required to perform predictions
server <- function(input, output) {
observeEvent(input$predict, {
# Create the input vector for prediction
input_vector <- c(
input$firstBlood,
input$firstTower,
input$firstInhibitor,
input$firstBaron,
input$firstDragon,
input$firstRiftHerald,
input$t1_towerKills,
input$t1_inhibitorKills,
input$t1_baronKills,
input$t1_dragonKills,
input$t1_riftHeraldKills,
input$t2_towerKills,
input$t2_inhibitorKills,
input$t2_baronKills,
input$t2_dragonKills,
input$t2_riftHeraldKills
)
# Convert the input vector to a matrix for prediction
model_matrix <- matrix(input_vector, nrow = 1)
# Make the prediction using the loaded model
prediction <- predict(model, newx = model_matrix, type = "response")
# Show the prediction result
output$prediction <- renderPrint({
if (prediction >= 0.5) {
"Team 1 is predicted to win!"
} else {
"Team 2 is predicted to win!"
}
})
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(glmnet) # Make sure you have glmnet for the model
# Load the trained model
model <- readRDS("lol_LASSO_min_AUC.rds")
# Load required libraries
ui <- fluidPage(
titlePanel("Should you ff bruh"),
sidebarLayout(
sidebarPanel(
selectInput("firstBlood", "First Blood:", choices = c("No Team" = 0, "Team 1" = 1, "Team 2" = 2)),
selectInput("firstTower", "First Tower:", choices = c("No Team" = 0, "Team 1" = 1, "Team 2" = 2)),
selectInput("firstInhibitor", "First Inhibitor:", choices = c("No Team" = 0, "Team 1" = 1, "Team 2" = 2)),
selectInput("firstBaron", "First Baron:", choices = c("No Team" = 0, "Team 1" = 1, "Team 2" = 2)),
selectInput("firstDragon", "First Dragon:", choices = c("No Team" = 0, "Team 1" = 1, "Team 2" = 2)),
selectInput("firstRiftHerald", "First Rift Herald:", choices = c("No Team" = 0, "Team 1" = 1, "Team 2" = 2)),
numericInput("t1_towerKills", "Team 1 Tower Kills:", 0, min = 0),
numericInput("t1_inhibitorKills", "Team 1 Inhibitor Kills:", 0, min = 0),
numericInput("t1_baronKills", "Team 1 Baron Kills:", 0, min = 0),
numericInput("t1_dragonKills", "Team 1 Dragon Kills:", 0, min = 0),
numericInput("t1_riftHeraldKills", "Team 1 Rift Herald Kills:", 0, min = 0),
numericInput("t2_towerKills", "Team 2 Tower Kills:", 0, min = 0),
numericInput("t2_inhibitorKills", "Team 2 Inhibitor Kills:", 0, min = 0),
numericInput("t2_baronKills", "Team 2 Baron Kills:", 0, min = 0),
numericInput("t2_dragonKills", "Team 2 Dragon Kills:", 0, min = 0),
numericInput("t2_riftHeraldKills", "Team 2 Rift Herald Kills:", 0, min = 0),
actionButton("predict", "Predict")
),
mainPanel(
h4("Prediction Result:"),
verbatimTextOutput("prediction")
)
)
)
# Define server logic required to perform predictions
server <- function(input, output) {
observeEvent(input$predict, {
# Create the input vector for prediction
input_vector <- c(
as.numeric(input$firstBlood),
as.numeric(input$firstTower),
as.numeric(input$firstInhibitor),
as.numeric(input$firstBaron),
as.numeric(input$firstDragon),
as.numeric(input$firstRiftHerald),
input$t1_towerKills,
input$t1_inhibitorKills,
input$t1_baronKills,
input$t1_dragonKills,
input$t1_riftHeraldKills,
input$t2_towerKills,
input$t2_inhibitorKills,
input$t2_baronKills,
input$t2_dragonKills,
input$t2_riftHeraldKills
)
# Convert the input vector to a matrix for prediction
model_matrix <- matrix(input_vector, nrow = 1)
# Make the prediction using the loaded model
prediction <- predict(model, newx = model_matrix, type = "response")
# Calculate probabilities for both teams
prob_team_1 <- prediction * 100  # Convert to percentage
prob_team_2 <- (1 - prediction) * 100  # Convert to percentage
# Show the prediction result
output$prediction <- renderPrint({
paste("Team 1 is likely to win: ", round(prob_team_1, 2), "%", sep = "")
paste("Team 2 is likely to win: ", round(prob_team_2, 2), "%", sep = "")
})
})
}
# Run the application
shinyApp(ui = ui, server = server)
install.packages("RInno")
library(RInno)
create_app(
app_name = "Should you ff", # Name of your application
app_dir = "main.R", # Directory containing your app files
pkg_name = "ShouldYouFF", # Package name for R
R_version = "4.3.1", # Specify R version used
)
library(RInno)
create_app(
app_name = "Should you ff", # Name of your application
app_dir = "main.R", # Directory containing your app files
pkg_name = "ShouldYouFF", # Package name for R
R_version = "4.3.1", # Specify R version used
)
create_app(
app_name = "Should you ff", # Name of your application
app_dir = new_app_dir, # Directory containing your app files
pkg_name = "ShouldYouFF", # Package name for R
R_version = "4.3.1", # Specify R version used
)
library(RInno)
new_app_dir <- "C:/Users/linh0/lol_win/Lol--win-prediction/dir"
dir.create(new_app_dir, recursive = TRUE)
file.copy("main.R", new_app_dir)
create_app(
app_name = "Should you ff", # Name of your application
app_dir = new_app_dir, # Directory containing your app files
pkg_name = "ShouldYouFF", # Package name for R
R_version = "4.3.1", # Specify R version used
)
R.version.string
library(shiny)
library(glmnet) # Make sure you have glmnet for the model
# Load the trained model
model <- readRDS("lol_LASSO_min_AUC.rds")
# Load required libraries
ui <- fluidPage(
titlePanel("Should you ff bruh"),
sidebarLayout(
sidebarPanel(
selectInput("firstBlood", "First Blood:", choices = c("No Team" = 0, "Team 1" = 1, "Team 2" = 2)),
selectInput("firstTower", "First Tower:", choices = c("No Team" = 0, "Team 1" = 1, "Team 2" = 2)),
selectInput("firstInhibitor", "First Inhibitor:", choices = c("No Team" = 0, "Team 1" = 1, "Team 2" = 2)),
selectInput("firstBaron", "First Baron:", choices = c("No Team" = 0, "Team 1" = 1, "Team 2" = 2)),
selectInput("firstDragon", "First Dragon:", choices = c("No Team" = 0, "Team 1" = 1, "Team 2" = 2)),
selectInput("firstRiftHerald", "First Rift Herald:", choices = c("No Team" = 0, "Team 1" = 1, "Team 2" = 2)),
numericInput("t1_towerKills", "Team 1 Tower Kills:", 0, min = 0),
numericInput("t1_inhibitorKills", "Team 1 Inhibitor Kills:", 0, min = 0),
numericInput("t1_baronKills", "Team 1 Baron Kills:", 0, min = 0),
numericInput("t1_dragonKills", "Team 1 Dragon Kills:", 0, min = 0),
numericInput("t1_riftHeraldKills", "Team 1 Rift Herald Kills:", 0, min = 0),
numericInput("t2_towerKills", "Team 2 Tower Kills:", 0, min = 0),
numericInput("t2_inhibitorKills", "Team 2 Inhibitor Kills:", 0, min = 0),
numericInput("t2_baronKills", "Team 2 Baron Kills:", 0, min = 0),
numericInput("t2_dragonKills", "Team 2 Dragon Kills:", 0, min = 0),
numericInput("t2_riftHeraldKills", "Team 2 Rift Herald Kills:", 0, min = 0),
actionButton("predict", "Predict")
),
mainPanel(
h4("Prediction Result:"),
verbatimTextOutput("prediction")
)
)
)
# Define server logic required to perform predictions
server <- function(input, output) {
observeEvent(input$predict, {
# Create the input vector for prediction
input_vector <- c(
as.numeric(input$firstBlood),
as.numeric(input$firstTower),
as.numeric(input$firstInhibitor),
as.numeric(input$firstBaron),
as.numeric(input$firstDragon),
as.numeric(input$firstRiftHerald),
input$t1_towerKills,
input$t1_inhibitorKills,
input$t1_baronKills,
input$t1_dragonKills,
input$t1_riftHeraldKills,
input$t2_towerKills,
input$t2_inhibitorKills,
input$t2_baronKills,
input$t2_dragonKills,
input$t2_riftHeraldKills
)
# Convert the input vector to a matrix for prediction
model_matrix <- matrix(input_vector, nrow = 1)
# Make the prediction using the loaded model
prediction <- predict(model, newx = model_matrix, type = "response")
# Calculate probabilities for both teams
prob_team_1 <- prediction * 100  # Convert to percentage
prob_team_2 <- (1 - prediction) * 100  # Convert to percentage
# Show the prediction result
output$prediction <- renderPrint({
paste("Team 1 is likely to win: ", round(prob_team_1, 2), "%", sep = "")
paste("Team 2 is likely to win: ", round(prob_team_2, 2), "%", sep = "")
})
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(glmnet) # Make sure you have glmnet for the model
# Load the trained model
model <- readRDS("lol_LASSO_min_AUC.rds")
# Load required libraries
ui <- fluidPage(
titlePanel("Should you ff bruh"),
sidebarLayout(
sidebarPanel(
selectInput("firstBlood", "First Blood:", choices = c("No Team" = 0, "Team 1" = 1, "Team 2" = 2)),
selectInput("firstTower", "First Tower:", choices = c("No Team" = 0, "Team 1" = 1, "Team 2" = 2)),
selectInput("firstInhibitor", "First Inhibitor:", choices = c("No Team" = 0, "Team 1" = 1, "Team 2" = 2)),
selectInput("firstBaron", "First Baron:", choices = c("No Team" = 0, "Team 1" = 1, "Team 2" = 2)),
selectInput("firstDragon", "First Dragon:", choices = c("No Team" = 0, "Team 1" = 1, "Team 2" = 2)),
selectInput("firstRiftHerald", "First Rift Herald:", choices = c("No Team" = 0, "Team 1" = 1, "Team 2" = 2)),
numericInput("t1_towerKills", "Team 1 Tower Kills:", 0, min = 0),
numericInput("t1_inhibitorKills", "Team 1 Inhibitor Kills:", 0, min = 0),
numericInput("t1_baronKills", "Team 1 Baron Kills:", 0, min = 0),
numericInput("t1_dragonKills", "Team 1 Dragon Kills:", 0, min = 0),
numericInput("t1_riftHeraldKills", "Team 1 Rift Herald Kills:", 0, min = 0),
numericInput("t2_towerKills", "Team 2 Tower Kills:", 0, min = 0),
numericInput("t2_inhibitorKills", "Team 2 Inhibitor Kills:", 0, min = 0),
numericInput("t2_baronKills", "Team 2 Baron Kills:", 0, min = 0),
numericInput("t2_dragonKills", "Team 2 Dragon Kills:", 0, min = 0),
numericInput("t2_riftHeraldKills", "Team 2 Rift Herald Kills:", 0, min = 0),
actionButton("predict", "Predict")
),
mainPanel(
h4("Prediction Result:"),
verbatimTextOutput("prediction")
)
)
)
# Define server logic required to perform predictions
server <- function(input, output) {
observeEvent(input$predict, {
# Create the input vector for prediction
input_vector <- c(
as.numeric(input$firstBlood),
as.numeric(input$firstTower),
as.numeric(input$firstInhibitor),
as.numeric(input$firstBaron),
as.numeric(input$firstDragon),
as.numeric(input$firstRiftHerald),
input$t1_towerKills,
input$t1_inhibitorKills,
input$t1_baronKills,
input$t1_dragonKills,
input$t1_riftHeraldKills,
input$t2_towerKills,
input$t2_inhibitorKills,
input$t2_baronKills,
input$t2_dragonKills,
input$t2_riftHeraldKills
)
# Convert the input vector to a matrix for prediction
model_matrix <- matrix(input_vector, nrow = 1)
# Make the prediction using the loaded model
prediction <- predict(model, newx = model_matrix, type = "response")
# Calculate probabilities for both teams
prob_team_1 <- prediction * 100  # Convert to percentage
prob_team_2 <- (1 - prediction) * 100  # Convert to percentage
# Show the prediction result
output$prediction <- renderPrint({
paste("Team 1 is likely to win: ", round(prob_team_1, 2), "%", sep = "")
paste("Team 2 is likely to win: ", round(prob_team_2, 2), "%", sep = "")
})
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(rsconnect)
deployApp(appDir = "main.Rmd")
library(shiny); runApp('main.R')
shiny::runApp()
forgetDeployment(appName = "main")
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
